package org.example;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public class Server {
    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(4000);
        List<Socket> clientSockets = new ArrayList<>();

        System.out.println("–û–∂–∏–¥–∞—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤...");

        while(true) {
            Socket clientSocket = serverSocket.accept();
            clientSockets.add(clientSocket);
            System.out.println("–î–ò–ö–ê–Ø –í–ï–†–û–ß–ö–ê –ê–í–î–ï–ï–í–ê –ü–û–î–ö–õ–Æ–ß–ò–õ–ê–°–¨ üòÄüòÄüòÄüòÄüòÄ");
            new Thread(() -> handleGuesses(clientSocket, clientSockets)).start();
        }
    }

    private static void handleGuesses(Socket clientSocket, List<Socket> clientSockets) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
            int sizeYes = 0;
            int sizeNo = 0;
            String guess;

            while(true) {
                guess = in.readLine();

                switch (guess) {
                    case "/no": {
                        sizeNo++;
                        out.println("–≤–µ—Ä–∞ –ª–æ—Ö –≥–æ–≤–æ—Ä–∏—Ç –Ω–æ—É");
                        break;
                    }
                    case "/yes":{
                        sizeYes++;
                        out.println("–≤–µ—Ä–∞ –≤—Ä–∞–≥ –Ω–∞—Ä–æ–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç yec");
                        break;
                    }
                    case "/getall":{
                        out.println("–≥–µ—Ç –ê–õ —É–µ—Å=" + sizeYes + " –∏ –Ω–æ—É=" + sizeNo);
                        break;
                    }
                    case "/help":{
                        out.println(" /no /yes /getall /help —Å–∫—É–ª–∏—Ç –æ –ø–æ–º–æ—â–∏");
                        break;
                    }
                    case "/exit":{
                        out.println(" –ø—Ä–æ—â–∞–π—Ç–µ –¥—Ä—É–∑–∏ —è —Ç–µ–ø–µ—Ä—å –Ω–∞—Ç—É—Ä–∞–ª");
                        clientSocket.close();
                        clientSockets.remove(clientSocket);
                        break;
                    }
                    default: {
                        out.println(" default");
                        break;
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("Error : " + e.getMessage());
        }
    }
}
